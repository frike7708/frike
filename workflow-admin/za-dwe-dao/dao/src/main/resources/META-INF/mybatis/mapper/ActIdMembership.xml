<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhongan.dwe.dao.repository.actidmembership.ActIdMembershipRepository">

<insert id="insert">
 insert into ACT_ID_MEMBERSHIP (USER_ID_,GROUP_ID_) values
(#{userId} ,#{groupId} )
</insert>

<select id="findAll" resultType="com.zhongan.dwe.dao.dataobject.ActIdMembership"> 
 select <include refid="allColumns"/> from ACT_ID_MEMBERSHIP 
</select>

<select id="findByCondition" resultType="com.zhongan.dwe.dao.dataobject.ActIdMembership" 
parameterType="com.zhongan.dwe.dao.repository.actidmembership.condition.ActIdMembershipCondition"> 
 select <include refid="selectColumns" /> 
 from ACT_ID_MEMBERSHIP 
<include refid="condition" /> 
<include refid="orderBy" /> 
<if test="page != null and page.start != null and page.limit != null"> 
 limit ${page.start},${page.limit}  
</if> 
</select>

<select id="countAll" resultType="int"> 
 select count(*) from ACT_ID_MEMBERSHIP 
</select>

<select id="countByCondition" resultType="int"> 
 select count(*) from ACT_ID_MEMBERSHIP  
<include refid="condition" /> 
</select>

<sql id="selectColumns"> 
<choose>
<when test="select != null and select.columns != null">
<foreach collection="select.columns" item="item" index="index" separator=",">
 ${item} 
</foreach>
</when> 
<otherwise><include refid="allColumns"/></otherwise>
</choose>
</sql>

<sql id="allColumns">
 USER_ID_ as userId, GROUP_ID_ as groupId</sql>	
	
<sql id="orderBy">
<if test="orderBy != null and orderBy.orderBy != null"> 
 order by 
<foreach item="item" index="index" collection="orderBy.orderBy" separator=","> 
 ${index} ${item} 
</foreach>
</if>
</sql>	

<sql id="condition">
<where>
<if test= "where != null and where.inUserId != null">
and USER_ID_ in 
<foreach collection="where.inUserId" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.inGroupId != null">
and GROUP_ID_ in 
<foreach collection="where.inGroupId" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.notInUserId != null">
and USER_ID_ not in 
<foreach collection="where.notInUserId" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.notInGroupId != null">
and GROUP_ID_ not in 
<foreach collection="where.notInGroupId" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.userIdIsNull == true">
and USER_ID_ is null
</if>
<if test= "where != null and where.userIdIsNull == false">
and USER_ID_ is not null
</if>
<if test= "where != null and where.groupIdIsNull == true">
and GROUP_ID_ is null
</if>
<if test= "where != null and where.groupIdIsNull == false">
and GROUP_ID_ is not null
</if>
<if test= "where != null and where.userIdNotEqual != null">
and USER_ID_ != #{where.userIdNotEqual}
</if>
<if test= "where != null and where.groupIdNotEqual != null">
and GROUP_ID_ != #{where.groupIdNotEqual}
</if>
<if test= "where != null and where.likeUserId != null">
and USER_ID_ like CONCAT('%','${where.likeUserId}','%')
</if> 
<if test= "where != null and where.likeGroupId != null">
and GROUP_ID_ like CONCAT('%','${where.likeGroupId}','%')
</if> 
<if test= "where != null and where.leftLikeUserId != null">
and USER_ID_ like CONCAT('%','${where.leftLikeUserId}')
</if> 
<if test= "where != null and where.leftLikeGroupId != null">
and GROUP_ID_ like CONCAT('%','${where.leftLikeGroupId}')
</if> 
<if test= "where != null and where.rightLikeUserId != null">
and USER_ID_ like CONCAT('${where.rightLikeUserId}','%')
</if> 
<if test= "where != null and where.rightLikeGroupId != null">
and GROUP_ID_ like CONCAT('${where.rightLikeGroupId}','%')
</if> 
<if test= "where != null and where.notLikeUserId != null">
and USER_ID_ not like CONCAT('%','${where.notLikeUserId}','%')
</if> 
<if test= "where != null and where.notLikeGroupId != null">
and GROUP_ID_ not like CONCAT('%','${where.notLikeGroupId}','%')
</if> 
<if test= "where != null and where.notLeftLikeUserId != null">
and USER_ID_ not like CONCAT('%','${where.notLeftLikeUserId}')
</if> 
<if test= "where != null and where.notLeftLikeGroupId != null">
and GROUP_ID_ not like CONCAT('%','${where.notLeftLikeGroupId}')
</if> 
<if test= "where != null and where.notRightLikeUserId != null">
and USER_ID_ not like CONCAT('%','${where.notRightLikeUserId}','%')
</if> 
<if test= "where != null and where.notRightLikeGroupId != null">
and GROUP_ID_ not like CONCAT('%','${where.notRightLikeGroupId}','%')
</if> 
<if test= "where != null and where.greaterThanUserId != null and where.lessThanUserId != null">
and USER_ID_ &lt; #{where.lessThanUserId} and USER_ID_ &gt; #{where.greaterThanUserId}
</if>
<if test= "where != null and where.equalAndGreaterThanUserId != null and where.equalAndLessThanUserId != null">
and USER_ID_ &lt;= #{where.equalAndLessThanUserId} and USER_ID_ &gt;= #{where.equalAndGreaterThanUserId}
</if>
<if test= "where != null and where.greaterThanGroupId != null and where.lessThanGroupId != null">
and GROUP_ID_ &lt; #{where.lessThanGroupId} and GROUP_ID_ &gt; #{where.greaterThanGroupId}
</if>
<if test= "where != null and where.equalAndGreaterThanGroupId != null and where.equalAndLessThanGroupId != null">
and GROUP_ID_ &lt;= #{where.equalAndLessThanGroupId} and GROUP_ID_ &gt;= #{where.equalAndGreaterThanGroupId}
</if>
<if test= "where != null and where.userId != null">
and USER_ID_ = #{where.userId}
</if> 
<if test= "where != null and where.groupId != null">
and GROUP_ID_ = #{where.groupId}
</if> 
 </where>
 </sql>	
</mapper>