<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhongan.dwe.dao.repository.actidgroup.ActIdGroupRepository">
<insert id="insert" parameterType="com.zhongan.dwe.dao.dataobject.ActIdGroup" useGeneratedKeys="true" keyProperty="id">
 insert into ACT_ID_GROUP (ID_,REV_,NAME_,TYPE_) values
(#{id} ,#{rev} ,#{name} ,#{type} )

</insert>

<insert id="batchInsert" parameterType="java.util.List">
 insert into ACT_ID_GROUP (ID_,REV_,NAME_,TYPE_) values 
<foreach collection="list" item="item" index="index" separator=",">
(#{item.id} ,#{item.rev} ,#{item.name} ,#{item.type} )
</foreach>
</insert>

<update id="update">
<include refid="updateColumn" />
where ID_ = #{o.id}
</update>

<update id="updateIncludeNull">
<include refid="updateColumnIncludeNull" />
where ID_ = #{o.id}
</update>

<sql id="updateColumn">
 update ACT_ID_GROUP 
<set> 
<if test= "o.rev!=null">
 REV_ = #{o.rev},
</if>
<if test= "o.name!=null">
 NAME_ = #{o.name},
</if>
<if test= "o.type!=null">
 TYPE_ = #{o.type},
</if>
</set>
</sql>

<sql id="updateColumnIncludeNull">
 update ACT_ID_GROUP 
<set> 
 REV_ = #{o.rev},
 NAME_ = #{o.name},
 TYPE_ = #{o.type},
</set>
</sql>

<update id="updateByCondition">
<include refid="updateColumn" />
<include refid="condition" />
</update>

<update id="updateIncludeNullByCondition">
<include refid="updateColumnIncludeNull" />
<include refid="condition" />
</update>

<update id="batchUpdate">
<foreach collection="list" item="item" index="index" open="" 
close="" separator=";"> 
 update ACT_ID_GROUP 
<set> 
<if test="item.rev!=null"> 
 REV_ = #{item.rev},
</if> 
<if test="item.name!=null"> 
 NAME_ = #{item.name},
</if> 
<if test="item.type!=null"> 
 TYPE_ = #{item.type},
</if> 
</set> 
 where ID_ = #{item.id} 
</foreach> 
</update>

<update id="batchUpdateIncludeNull">
<foreach collection="list" item="item" index="index" open="" 
close="" separator=";"> 
 update ACT_ID_GROUP 
<set> 
 REV_ = #{item.rev},
 NAME_ = #{item.name},
 TYPE_ = #{item.type},
</set> 
 where ID_ = #{item.id} 
</foreach> 
</update>

<delete id="deleteByOid" parameterType="String">
 delete from ACT_ID_GROUP where
 ID_ = #{id}
</delete>

<delete id="batchRemove">
delete from ACT_ID_GROUP where ID_ in
<foreach item="item" index="index" collection="list" open="("
separator="," close=")">
 #{item}
</foreach>
</delete>

<delete id="deleteByCondition">
 delete from ACT_ID_GROUP
<include refid="condition" />
</delete>

<select id="get" resultType="com.zhongan.dwe.dao.dataobject.ActIdGroup" 
parameterType="String"> 
 select <include refid="allColumns" /> 
 from ACT_ID_GROUP where ID_ = #{id} 
</select>

<select id="findAll" resultType="com.zhongan.dwe.dao.dataobject.ActIdGroup"> 
 select <include refid="allColumns"/> from ACT_ID_GROUP 
</select>

<select id="findByCondition" resultType="com.zhongan.dwe.dao.dataobject.ActIdGroup" 
parameterType="com.zhongan.dwe.dao.repository.actidgroup.condition.ActIdGroupCondition"> 
 select <include refid="selectColumns" /> 
 from ACT_ID_GROUP 
<include refid="condition" /> 
<include refid="orderBy" /> 
<if test="page != null and page.start != null and page.limit != null"> 
 limit ${page.start},${page.limit}  
</if> 
</select>

<select id="countAll" resultType="int"> 
 select count(*) from ACT_ID_GROUP 
</select>

<select id="countByCondition" resultType="int"> 
 select count(*) from ACT_ID_GROUP  
<include refid="condition" /> 
</select>

<sql id="selectColumns"> 
<choose>
<when test="select != null and select.columns != null">
<foreach collection="select.columns" item="item" index="index" separator=",">
 ${item} 
</foreach>
</when> 
<otherwise><include refid="allColumns"/></otherwise>
</choose>
</sql>

<sql id="allColumns">
 ID_ as id, REV_ as rev, NAME_ as name, TYPE_ as type</sql>	
	
<sql id="orderBy">
<if test="orderBy != null and orderBy.orderBy != null"> 
 order by 
<foreach item="item" index="index" collection="orderBy.orderBy" separator=","> 
 ${index} ${item} 
</foreach>
</if>
</sql>	

<sql id="condition">
<where>
<if test= "where != null and where.inId != null">
and ID_ in 
<foreach collection="where.inId" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.inRev != null">
and REV_ in 
<foreach collection="where.inRev" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.inName != null">
and NAME_ in 
<foreach collection="where.inName" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.inType != null">
and TYPE_ in 
<foreach collection="where.inType" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.notInId != null">
and ID_ not in 
<foreach collection="where.notInId" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.notInRev != null">
and REV_ not in 
<foreach collection="where.notInRev" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.notInName != null">
and NAME_ not in 
<foreach collection="where.notInName" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.notInType != null">
and TYPE_ not in 
<foreach collection="where.notInType" index="index" item="item" open="(" separator="," close=")">
 #{item} 
</foreach>
</if> 
<if test= "where != null and where.idIsNull == true">
and ID_ is null
</if>
<if test= "where != null and where.idIsNull == false">
and ID_ is not null
</if>
<if test= "where != null and where.revIsNull == true">
and REV_ is null
</if>
<if test= "where != null and where.revIsNull == false">
and REV_ is not null
</if>
<if test= "where != null and where.nameIsNull == true">
and NAME_ is null
</if>
<if test= "where != null and where.nameIsNull == false">
and NAME_ is not null
</if>
<if test= "where != null and where.typeIsNull == true">
and TYPE_ is null
</if>
<if test= "where != null and where.typeIsNull == false">
and TYPE_ is not null
</if>
<if test= "where != null and where.idNotEqual != null">
and ID_ != #{where.idNotEqual}
</if>
<if test= "where != null and where.revNotEqual != null">
and REV_ != #{where.revNotEqual}
</if>
<if test= "where != null and where.nameNotEqual != null">
and NAME_ != #{where.nameNotEqual}
</if>
<if test= "where != null and where.typeNotEqual != null">
and TYPE_ != #{where.typeNotEqual}
</if>
<if test= "where != null and where.likeId != null">
and ID_ like CONCAT('%','${where.likeId}','%')
</if> 
<if test= "where != null and where.likeName != null">
and NAME_ like CONCAT('%','${where.likeName}','%')
</if> 
<if test= "where != null and where.likeType != null">
and TYPE_ like CONCAT('%','${where.likeType}','%')
</if> 
<if test= "where != null and where.leftLikeId != null">
and ID_ like CONCAT('%','${where.leftLikeId}')
</if> 
<if test= "where != null and where.leftLikeName != null">
and NAME_ like CONCAT('%','${where.leftLikeName}')
</if> 
<if test= "where != null and where.leftLikeType != null">
and TYPE_ like CONCAT('%','${where.leftLikeType}')
</if> 
<if test= "where != null and where.rightLikeId != null">
and ID_ like CONCAT('${where.rightLikeId}','%')
</if> 
<if test= "where != null and where.rightLikeName != null">
and NAME_ like CONCAT('${where.rightLikeName}','%')
</if> 
<if test= "where != null and where.rightLikeType != null">
and TYPE_ like CONCAT('${where.rightLikeType}','%')
</if> 
<if test= "where != null and where.notLikeId != null">
and ID_ not like CONCAT('%','${where.notLikeId}','%')
</if> 
<if test= "where != null and where.notLikeName != null">
and NAME_ not like CONCAT('%','${where.notLikeName}','%')
</if> 
<if test= "where != null and where.notLikeType != null">
and TYPE_ not like CONCAT('%','${where.notLikeType}','%')
</if> 
<if test= "where != null and where.notLeftLikeId != null">
and ID_ not like CONCAT('%','${where.notLeftLikeId}')
</if> 
<if test= "where != null and where.notLeftLikeName != null">
and NAME_ not like CONCAT('%','${where.notLeftLikeName}')
</if> 
<if test= "where != null and where.notLeftLikeType != null">
and TYPE_ not like CONCAT('%','${where.notLeftLikeType}')
</if> 
<if test= "where != null and where.notRightLikeId != null">
and ID_ not like CONCAT('%','${where.notRightLikeId}','%')
</if> 
<if test= "where != null and where.notRightLikeName != null">
and NAME_ not like CONCAT('%','${where.notRightLikeName}','%')
</if> 
<if test= "where != null and where.notRightLikeType != null">
and TYPE_ not like CONCAT('%','${where.notRightLikeType}','%')
</if> 
<if test= "where != null and where.greaterThanId != null and where.lessThanId != null">
and ID_ &lt; #{where.lessThanId} and ID_ &gt; #{where.greaterThanId}
</if>
<if test= "where != null and where.equalAndGreaterThanId != null and where.equalAndLessThanId != null">
and ID_ &lt;= #{where.equalAndLessThanId} and ID_ &gt;= #{where.equalAndGreaterThanId}
</if>
<if test= "where != null and where.greaterThanRev != null and where.lessThanRev != null">
and REV_ &lt; #{where.lessThanRev} and REV_ &gt; #{where.greaterThanRev}
</if>
<if test= "where != null and where.equalAndGreaterThanRev != null and where.equalAndLessThanRev != null">
and REV_ &lt;= #{where.equalAndLessThanRev} and REV_ &gt;= #{where.equalAndGreaterThanRev}
</if>
<if test= "where != null and where.greaterThanName != null and where.lessThanName != null">
and NAME_ &lt; #{where.lessThanName} and NAME_ &gt; #{where.greaterThanName}
</if>
<if test= "where != null and where.equalAndGreaterThanName != null and where.equalAndLessThanName != null">
and NAME_ &lt;= #{where.equalAndLessThanName} and NAME_ &gt;= #{where.equalAndGreaterThanName}
</if>
<if test= "where != null and where.greaterThanType != null and where.lessThanType != null">
and TYPE_ &lt; #{where.lessThanType} and TYPE_ &gt; #{where.greaterThanType}
</if>
<if test= "where != null and where.equalAndGreaterThanType != null and where.equalAndLessThanType != null">
and TYPE_ &lt;= #{where.equalAndLessThanType} and TYPE_ &gt;= #{where.equalAndGreaterThanType}
</if>
<if test= "where != null and where.id != null">
and ID_ = #{where.id}
</if> 
<if test= "where != null and where.rev != null">
and REV_ = #{where.rev}
</if> 
<if test= "where != null and where.name != null">
and NAME_ = #{where.name}
</if> 
<if test= "where != null and where.type != null">
and TYPE_ = #{where.type}
</if> 
 </where>
 </sql>	
</mapper>